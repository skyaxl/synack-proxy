// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package registryclient

import (
	"bytes"
	"context"

	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	//BasicAuthScopes basic
	BasicAuthScopes = "BasicAuth.Scopes"
)

// FullUser defines model for FullUser.
type FullUser struct {
	Name     string `json:"name,omitempty"`
	Password string `json:"password,omitempty"`
	Username string `json:"username,omitempty"`
}

// Registry defines model for Registry.
type Registry struct {
	DumpReq  []byte `json:"dump_req,omitempty"`
	DumpRes  []byte `json:"dump_res,omitempty"`
	Username string `json:"username,omitempty"`
}

// User defines model for User.
type User struct {
	Name     string `json:"name,omitempty"`
	Username string `json:"username,omitempty"`
}

// RegJSONBody defines parameters for Reg.
type RegJSONBody Registry

// CreateuserJSONBody defines parameters for Createuser.
type CreateuserJSONBody FullUser

// PutuserJSONBody defines parameters for Putuser.
type PutuserJSONBody FullUser

// RegJSONRequestBody defines body for Reg for application/json ContentType.
type RegJSONRequestBody RegJSONBody

// CreateuserJSONRequestBody defines body for Createuser for application/json ContentType.
type CreateuserJSONRequestBody CreateuserJSONBody

// PutuserJSONRequestBody defines body for Putuser for application/json ContentType.
type PutuserJSONRequestBody PutuserJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Reg request  with any body
	RegWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Reg(ctx context.Context, body RegJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Createuser request  with any body
	CreateuserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Createuser(ctx context.Context, body CreateuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Deleteuser request
	Deleteuser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Getuser request
	Getuser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Putuser request  with any body
	PutuserWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Putuser(ctx context.Context, username string, body PutuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RegWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Reg(ctx context.Context, body RegJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateuserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateuserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Createuser(ctx context.Context, body CreateuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateuserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Deleteuser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteuserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Getuser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetuserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutuserWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutuserRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Putuser(ctx context.Context, username string, body PutuserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutuserRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRegRequest calls the generic Reg builder with application/json body
func NewRegRequest(server string, body RegJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegRequestWithBody(server, "application/json", bodyReader)
}

// NewRegRequestWithBody generates requests for Reg with any type of body
func NewRegRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/reg")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateuserRequest calls the generic Createuser builder with application/json body
func NewCreateuserRequest(server string, body CreateuserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateuserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateuserRequestWithBody generates requests for Createuser with any type of body
func NewCreateuserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteuserRequest generates requests for Deleteuser
func NewDeleteuserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "username", username)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetuserRequest generates requests for Getuser
func NewGetuserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "username", username)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutuserRequest calls the generic Putuser builder with application/json body
func NewPutuserRequest(server string, username string, body PutuserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutuserRequestWithBody(server, username, "application/json", bodyReader)
}

// NewPutuserRequestWithBody generates requests for Putuser with any type of body
func NewPutuserRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "username", username)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	req = req.WithContext(ctx)
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Reg request  with any body
	RegWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegResponse, error)

	RegWithResponse(ctx context.Context, body RegJSONRequestBody) (*RegResponse, error)

	// Createuser request  with any body
	CreateuserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateuserResponse, error)

	CreateuserWithResponse(ctx context.Context, body CreateuserJSONRequestBody) (*CreateuserResponse, error)

	// Deleteuser request
	DeleteuserWithResponse(ctx context.Context, username string) (*DeleteuserResponse, error)

	// Getuser request
	GetuserWithResponse(ctx context.Context, username string) (*GetuserResponse, error)

	// Putuser request  with any body
	PutuserWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader) (*PutuserResponse, error)

	PutuserWithResponse(ctx context.Context, username string, body PutuserJSONRequestBody) (*PutuserResponse, error)
}

type RegResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Registry
}

// Status returns HTTPResponse.Status
func (r RegResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r CreateuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r DeleteuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutuserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PutuserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutuserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RegWithBodyWithResponse request with arbitrary body returning *RegResponse
func (c *ClientWithResponses) RegWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegResponse, error) {
	rsp, err := c.RegWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegResponse(rsp)
}

func (c *ClientWithResponses) RegWithResponse(ctx context.Context, body RegJSONRequestBody) (*RegResponse, error) {
	rsp, err := c.Reg(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRegResponse(rsp)
}

// CreateuserWithBodyWithResponse request with arbitrary body returning *CreateuserResponse
func (c *ClientWithResponses) CreateuserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateuserResponse, error) {
	rsp, err := c.CreateuserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateuserResponse(rsp)
}

func (c *ClientWithResponses) CreateuserWithResponse(ctx context.Context, body CreateuserJSONRequestBody) (*CreateuserResponse, error) {
	rsp, err := c.Createuser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateuserResponse(rsp)
}

// DeleteuserWithResponse request returning *DeleteuserResponse
func (c *ClientWithResponses) DeleteuserWithResponse(ctx context.Context, username string) (*DeleteuserResponse, error) {
	rsp, err := c.Deleteuser(ctx, username)
	if err != nil {
		return nil, err
	}
	return ParseDeleteuserResponse(rsp)
}

// GetuserWithResponse request returning *GetuserResponse
func (c *ClientWithResponses) GetuserWithResponse(ctx context.Context, username string) (*GetuserResponse, error) {
	rsp, err := c.Getuser(ctx, username)
	if err != nil {
		return nil, err
	}
	return ParseGetuserResponse(rsp)
}

// PutuserWithBodyWithResponse request with arbitrary body returning *PutuserResponse
func (c *ClientWithResponses) PutuserWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader) (*PutuserResponse, error) {
	rsp, err := c.PutuserWithBody(ctx, username, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePutuserResponse(rsp)
}

func (c *ClientWithResponses) PutuserWithResponse(ctx context.Context, username string, body PutuserJSONRequestBody) (*PutuserResponse, error) {
	rsp, err := c.Putuser(ctx, username, body)
	if err != nil {
		return nil, err
	}
	return ParsePutuserResponse(rsp)
}

// ParseRegResponse parses an HTTP response from a RegWithResponse call
func ParseRegResponse(rsp *http.Response) (*RegResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RegResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Registry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateuserResponse parses an HTTP response from a CreateuserWithResponse call
func ParseCreateuserResponse(rsp *http.Response) (*CreateuserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteuserResponse parses an HTTP response from a DeleteuserWithResponse call
func ParseDeleteuserResponse(rsp *http.Response) (*DeleteuserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetuserResponse parses an HTTP response from a GetuserWithResponse call
func ParseGetuserResponse(rsp *http.Response) (*GetuserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutuserResponse parses an HTTP response from a PutuserWithResponse call
func ParsePutuserResponse(rsp *http.Response) (*PutuserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PutuserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
